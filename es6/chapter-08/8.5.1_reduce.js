// map이 배열의 [각] 요소를 변형한다면,
// reduce는 [배열 자체]를 변형합니다.

// reduce라는 이름은 이 메소드가 보통 배열을 [값 하나로] 줄이는 데 쓰이기 때문에 붙었습니다.
// reduce가 반환하는 [갑 하나]는 객체일 수도 있고, 다른 배열일 수도 있습니다.
// 사실 reduce는 map과 filter를 비롯해 여태까지 설명한 배열 메소드의 동작을 대부분 대신할 수 있습니다.

// reduce는 map이나 filter와 마찬가지로 콜백 함수를 받습니다.
// 그런데 여태까지 설명한 콜백에서 첫 번째 매개변수는 항상 현재 배열 요소였지만, reduce는 다릅니다.
// reduce가 받는 첫 번째 매개변수는 배열이 줄어드는 대상인 누적값(accumulator) 입니다.
// 두 번째 매개변수부터는 여태까지 설명한 콜백의 순서대로 현재 배열 요소, 현재 인데스, 배열 자체입니다.

// reduce는 [초깃값]도 옵션으로 받을 수 있습니다.
// 배열의 숫자를 더하는 단순한 예제를 봅시다.
// const arr = [5, 7, 2, 4];
// const sum = arr.reduce((a, x) => a += x, 0);
// console.log(sum);       // 18

// 이 예제에서 누적값은 0으로 시작합니다.

// 초깃값을 제공할 필요도 없습니다.
// 초깃값이 제공되지 않으면 reduce는 
// * 첫 번째 배열 요소를 초깃값으로 보고,
// * 두 번째 배열 요소부터 함수를 호출합니다.

// 앞 예제에서 초깃값을 생략하고 다시 생각해봅시다.
const arr = [5, 7, 2, 4];
const sum = arr.reduce((a, x) => a += x);
console.log(sum);       // 18

// 단계는 하나 줄었지만 결과는 같습니다.