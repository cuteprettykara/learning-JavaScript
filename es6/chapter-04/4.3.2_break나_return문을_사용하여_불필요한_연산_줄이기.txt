뭔가를 찾기 위해서 루프를 실행했다면, 
찾으려는 것을 이미 찾은 후에는 루프 바디를 계속 실행할 필요가 없습니다.

예를 들어 봅시다.
어떤 숫자가 소수인지 판단하는 작업은 CPU 부하가 비교적 높은 일 중 하나입니다.
숫자 수천 개의 리스트에서 가장 앞에 있는 소수를 찾는다고 했을 때,
다음 코드는 일단 원하는 작업을 하기는 합니다.

let firstPrime = null;
for(let n of bigArrayOfNumbers) {
    if (isPrime(n) && firstPrime === null) firstPrime = n;
}

bigArrayOfNumbers에 들어 있는 숫자가 백만 개쯤 되고, 첫 번째 숫자가 소수였다면?
쓸모 없는 작업을 백만번이나 한 셈입니다.
break문을 쓰면 원하는 것을 찾는 즉시 루프에서 빠져나갈 수 있습니다.

let firstPrime = null;
for(let n of bigArrayOfNumbers) {
    if (isPrime(n)) {
        firstPrime = n;
        break;
    }
}

[이 루프가 함수 안에 있었다면] break대신 return문을 써도 됩니다.