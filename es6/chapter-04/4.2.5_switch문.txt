switch문의 조건은 [값으로 평가할 수 있는 표현식]입니다.

switch(expression) {
    case value1:
        // expression을 평가한 결과가 value1일 때 실행됩니다.
        [break;]
    case value2:
        // expression을 평가한 결과가 value2일 때 실행됩니다.
        [break;]
    
    ...

    case valueN:
        // expression을 평가한 결과가 valueN일 때 실행됩니다.
        [break;]
    default:
        // expression을 평가한 결과에 맞는 것이 없을 때 실행됩니다.
         [break;]
}

자바스크립트는 expression을 평가하고, 그에 일치하는 첫 번째 case를 찾아서
* break, return, continue, throw를 만나거나
* switch문이 끝날 때까지 

문을 실행합니다.


토마스가 숫자에 대한 미신을 갖고 있다면 switch문을 써서 토마스의 미신을 존중하도록 처리할 수 있습니다.

switch(totalBet) {
    case 7:
        totalBet = funds;
        break;
    case 11:
        totalBet = 0;
        break;
    case 13:
        totalBet = 0;
        break;
    case 21:
       totalBet = 21;
        break;
}

주머니에서 꺼낸 돈이 11이나 13펜스일 때는 똑같은 행동을 합니다.
이런 경우에는 [break 없는 case절](fall-through execution)을 활용할 수 있습니다.

switch(totalBet) {
    case 7:
        totalBet = funds;
        break;
    case 11:
    case 13:
        totalBet = 0;
        break;
    case 21:
       totalBet = 21;
        break;
}

13은 11보다 훨씬 불길한 숫자라서, 돈을 걸지 않는 것으로는 모자라고 1펜스를 기부해야 한다면 어떻게 해야 할까요?

switch(totalBet) {
    case 7:
        totalBet = funds;
        break;
    case 13:
        funds = funds - 1;  // 1펜스를 기부합니다.
    case 11:
        totalBet = 0;
        break;
    case 21:
       totalBet = 21;
        break;
}

이 코드는 우리가 원하는 일을 정확히 수행합니다. 하지만 약점도 있습니다.
이 코드는 정확한데도 불구하고, [실수처럼 보입니다.]
동료가 이 코드를 보고 break문을 깜박 잊은 거로 생각할 수도 있습니다.
그 동료는 break문을 추가할 테고, 코드는 원하는 대로 동작하지 않게 될 겁니다.

[break 없는 case절]이 장점보다는 단점이 더 많다고 생각하는 분들이 많으니,
이 기능을 활용하고 싶다면 항상 주석을 남겨서 의도적으로 break문을 생략했다는 것을 명확히 하십시오.

항상 break문을 쓰는 습관을 들여야 합니다.
이 규칙의 예외는 [switch문을 함수 안에서 쓸 때] 뿐입니다.
return문은 즉시 함수를 빠져나가므로 break문 대신 쓸 수 있습니다.

function adjustBet(totalBet, funds) {
    switch(totalBet) {
        case 7:
            return funds;
        case 13:
            return 0;
        default:
            return totalBet;
    }
}