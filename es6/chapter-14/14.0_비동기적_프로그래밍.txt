사용자의 행동은 전적으로 비동기적입니다.
하지마 비동기적 실행이 사용자 입력 하나 때문에 필요한 건 아닙니다.
자바스크립트의 본성 때문에 비동기적 프로그래밍이 필요합니다.

자바스크립트 애플리케이션은 단일 스레드에서 동작합니다.

사실 멀티스레드 프로그래밍에서 겪어야 하는 골치 아픈 문제를 신경 쓰지 않아도 된다는 장점도 있습니다.
물론 대가도 있습니다. 부드럽게 동작하는 소프트웨어를 만들기 위해서는 여러 문제를 [비동기적 관점]에서 생각해야 합니다.

자바스크립트는 매우 일찍부터 비동기적 실행 메커니즘이 존재했지만,
자바스크립트의 인기가 높아지고 자바스크립트로 만드는 소프트웨어가 점점 복잡해짐에 따라 비동기적 프로그래밍에 필요한
장치들이 추가되었습니다.

자바스크립트의 비동기적 프로그래밍에는 뚜렷이 구분되는 세 가지 패러다임이 있습니다.

* 처음에는 콜백이 있었고,
* 프라미스(promise)가 뒤를 이었으며,
* 마지막은 제너레이터입니다.

제너레이터 자체는 비동기적 프로그래밍을 전혀 지원하지 않습니다.
제너레이터를 비동기적으로 사용하려면 프라미스나 특수한 콜백과 함께 사용해야 합니다.

프라미스 역시 콜백에 의존합니다.
콜백은 제너레이터나 프라미스 외에도 [이벤트 처리] 등에 유용하게 쓸 수 있습니다.

사용자 입력 외에, 비동기적 테크닉을 사용해야 하는 경우는 크게 세 가지가 있습니다.

* Ajax호출을 비롯한 네트워크 요청
* 파일을 읽고 쓰는 등의 파일시스템 작업
* 의도적으로 시간 지연을 사용하는 기능(알람 등)
