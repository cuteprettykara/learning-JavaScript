// 함수를 반환하는 함수는 아마 함수의 [가장 난해한] 사용법이겠지만, 그만큼 유용하기도 합니다.
// [어떤 기능이 있는 것을 만든다는 점에서], 함수를 반환하는 함수를 일종의 [3D 프린터]라고 생각할 수 있을 겁니다.
// 3D 프린터에 입력하는 설계도를 바꾸는 것과 마찬가지로, 반환받는 함수 역시 마음대로 바꿀 수 있습니다.

// sum 함수를 다시 생각해 봅시다.
// 이 함수는 각 요소를 더하기 전에, 해당 요소를 바꾸는 함수를 받습니다.
// 원한다면 sumOfSquares 함수를 만들 수도 있다고 했습니다.

// 그런데 상황이 바뀌어서, 그런 함수가 정말 필요하다고 해봅시다.
// [배열 하나만 받아서] 제곱의 합을 반환하는 함수가 필요하다고 해봅시다
// (API에서 sum함수를 허용하되 그 함수의 [매개변수를 하나만 허용하는] 경우를 가정합시다.)

// 해법 1: [필요할 때마다] 새 함수를 만든다.
function sum(arr, f) {
    if (typeof f != 'function') f = x => x;

    return arr.reduce((a, x) => a += f(x), 0);
}

function sumOfSquares(arr) {
    return sum(arr, x=>x*x);
}

console.log(sumOfSquares([1, 2, 3]));   // 14