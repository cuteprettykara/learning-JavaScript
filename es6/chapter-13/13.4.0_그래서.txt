이제 함수의 세 가지 측면, 즉
* 서브루틴
* 값을 반환하는 서브루틴
* 순수 함수

라는 측면을 살펴봤으니 잠시 멈추고, 이렇게 구분하는 것에 어떤 의미가 있는지 생각해 봐야 합니다.

[왜 함수를 사용할까요?]
함수를 서브루틴이라는 관점에서 보면 그 의문에 대한 한 가지 답을 얻습니다. 반복을 없애는 거죠.
순수 함수는 조금 더 복잡한 문제이며, 왜? 라는 의문에 대한 답도 더 추상적인 형태입니다.

순수 함수를 쓰면 
* 코드를 테스트하기 쉽고,
* 이해하기 쉽고,
* 재사용하기도 쉽습니다.

함수가 상황에 따라 다른 값을 반환하거나 부작용이 있다면 그 함수는 컨텍스트에 좌우되는 함수입니다.
그 함수가 쓰이던 프로그램이 아닌 다른 프로그램에서 사용하려 한다면 문제를 일으킬 수 있습니다.

항상 순수 함수를 쓰는 습관을 들이는 편이 좋습니다.
'습관'이라고 한 건, 가끔은 함수에 부수 효과가 있더라도 그냥 쓰는 편이 훨씬 쉬을 때가 있기 때문입니다.
초보 프로그래머라면 그런 때가 더 많을 겁니다.
그러지 말라는 건 아닙니다. 
단지, 잠시 멈추고 순수 함수를 사용하는 방법이 있는지 생각해 보라는 말입니다.
시간이 흐르면, 자연스럽게 순수 함수를 더 많이 쓰게 될 겁니다.

9장에서 설명한 객체지향 프로그래밍은 스코프를 밀접하게 관리해서 함수의 부수 효과를 제어할 수 있습니다.
