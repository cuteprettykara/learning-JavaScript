// let을 사용해 블록 수준 스코프를 만들면 이 문제는 해결되지만, 
// 블록 스코프 변수가 도입되기 전에는 이런 문제를 해결하기 위해 함수를 하나 더 썼습니다.
// [함수를 하나 더 쓰면] 스코프가 새로 만들어지고, [각 단계에서의 i의 값이] 클로저에 [캡쳐]됩니다.
// 이름 붙은 함수를 쓰는 예제를 먼저 봅시다.
function loopBody(i) {
    setTimeout(function() {
        console.log(i===0 ? "go!" : i);
    }, (5-i)*1000);
    
}

var i;
for (i = 5; i >= 0; i--) {
    loopBody(i);
}

// 루프의 각 단계에서 loopBody 함수가 호출됩니다.
// 자바스크립트는 매개변수를 값으로 넘깁니다.
// 따라서 루프의 각 단계에서 함수에 전달되는 것은 i가 아니라, i의 값입니다.
// 즉 처음에는 5가, 두번째에는 4가 전달됩니다.

// 중요한 것은 스코프 일곱 개가 만들어졌고, 변수도 일곱 개 만들어졌다는 겁니다.
// (하나는 외부 스코프, 나머지 여섯 개는 loopBody를 호출할 때마다)