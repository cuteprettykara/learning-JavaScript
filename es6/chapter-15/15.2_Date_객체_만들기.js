// Date객체는 네 가지 방법으로 만들 수 있습니다.
// 1. 매개변수 없이 호출: 현재 날짜에 해당하는 Date객체를 반환
// 2. 문자열을 제공 : 문자열을 해석해서 그에 맞는 날짜를 반환
// 3. 숫자를 제공 : 유닉스 타임스탬프로 해석
// 4. 기타 방법

// 1. 매개변수 없이 호출
console.log(new Date());    // 현재 날짜

// 2. 날짜 문자열 해석
console.log(new Date('June 14, 2018'));             // 2018년 6월 14일 0시 0분 0초(지역표준시)
console.log(new Date('June 14, 2018 GMT-0000'));    // 2018년 6월 14일 0시 0분 0초(UTC)

// 3. 유닉스 타임스탬프로 날짜 생성
console.log(new Date(0));                           // 1970년 1월 1일 0시 0분 0초 UTC

// 3. 유닉스 시간 원점 이전의 날짜를 구할 때
console.log(new Date(-365*24*60*60*1000));          // 1969년 1월 1일 0시 0분 0초 UTC

// 4. 자바스크립트의 월은 0으로 시작합니다. 0은 1월이고, 1은 2월입니다.
console.log(new Date(2015, 0));                     // 2015년 1월 1일 0시
console.log(new Date(2015, 1));                     // 2015년 2월 1일 0시
console.log(new Date(2015, 1, 14));                 // 2015년 2월 14일 0시
console.log(new Date(2015, 1, 14, 13));             // 2015년 2월 14일 오후 1시
console.log(new Date(2015, 1, 14, 13, 30));         // 2015년 2월 14일 오후 1시 30분
console.log(new Date(2015, 1, 14, 13, 30, 5));      // 2015년 2월 14일 오후 1시 30분 5초
console.log(new Date(2015, 1, 14, 13, 30, 5, 500)); // 2015년 2월 14일 오후 1시 30분 5.5초

// 앞의 예제를 테스트해보면 결과가 항상 현재 지역의 표준시에 따라 나온다는 사실을 알 수 있습니다.
// 이것이 자바스크립트 Date객체의 가장 큰 문제 중 하나입니다. [타임존을 명시할 방법이 없습니다].

// Date 객체는 항상 내부적으로는 UTC기준으로 저장하고,
// 출력할 때 운영체제에서 정의한 표준시에 맞게 변환합니다.

// 자바스크립트는 원래 브라우저 기반 스크립트 언어이니, 어쩌면 이렇게 하는 편이 올바른 일이었을 겁니다.
// 웹 페이지에서 날짜 관련 데이터를 표시한다면 사용자의 타임존에 맞게 표시하는 편이 나을 테니까요.
// 하지만 인터넷은 전 세계 어디에서든 쓰이고, 노드가 자바스크립트를 서버로 가져감에 따라
// 타임존을 더 [일관되게] 처리할 방법이 필요해졌습니다.